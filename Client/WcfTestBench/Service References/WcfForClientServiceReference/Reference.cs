//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WcfTestBench.WcfForClientServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WcfForClientServiceReference.IWcfServiceForClient")]
    public interface IWcfServiceForClient {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfServiceForClient/RegisterClient", ReplyAction="http://tempuri.org/IWcfServiceForClient/RegisterClientResponse")]
        void RegisterClient(string address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfServiceForClient/RegisterClient", ReplyAction="http://tempuri.org/IWcfServiceForClient/RegisterClientResponse")]
        System.Threading.Tasks.Task RegisterClientAsync(string address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfServiceForClient/UnRegisterClient", ReplyAction="http://tempuri.org/IWcfServiceForClient/UnRegisterClientResponse")]
        void UnRegisterClient(string address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfServiceForClient/UnRegisterClient", ReplyAction="http://tempuri.org/IWcfServiceForClient/UnRegisterClientResponse")]
        System.Threading.Tasks.Task UnRegisterClientAsync(string address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfServiceForClient/InitializeRtu", ReplyAction="http://tempuri.org/IWcfServiceForClient/InitializeRtuResponse")]
        bool InitializeRtu(Dto.InitializeRtu rtu);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfServiceForClient/InitializeRtu", ReplyAction="http://tempuri.org/IWcfServiceForClient/InitializeRtuResponse")]
        System.Threading.Tasks.Task<bool> InitializeRtuAsync(Dto.InitializeRtu rtu);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWcfServiceForClientChannel : WcfTestBench.WcfForClientServiceReference.IWcfServiceForClient, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WcfServiceForClientClient : System.ServiceModel.ClientBase<WcfTestBench.WcfForClientServiceReference.IWcfServiceForClient>, WcfTestBench.WcfForClientServiceReference.IWcfServiceForClient {
        
        public WcfServiceForClientClient() {
        }
        
        public WcfServiceForClientClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WcfServiceForClientClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WcfServiceForClientClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WcfServiceForClientClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void RegisterClient(string address) {
            base.Channel.RegisterClient(address);
        }
        
        public System.Threading.Tasks.Task RegisterClientAsync(string address) {
            return base.Channel.RegisterClientAsync(address);
        }
        
        public void UnRegisterClient(string address) {
            base.Channel.UnRegisterClient(address);
        }
        
        public System.Threading.Tasks.Task UnRegisterClientAsync(string address) {
            return base.Channel.UnRegisterClientAsync(address);
        }
        
        public bool InitializeRtu(Dto.InitializeRtu rtu) {
            return base.Channel.InitializeRtu(rtu);
        }
        
        public System.Threading.Tasks.Task<bool> InitializeRtuAsync(Dto.InitializeRtu rtu) {
            return base.Channel.InitializeRtuAsync(rtu);
        }
    }
}
