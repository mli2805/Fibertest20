// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Graph.Tests.Node
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class NodeRemoveFromLoopOfTraceFeature : Xunit.IClassFixture<NodeRemoveFromLoopOfTraceFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "NodeRemoveFromLoopOfTrace.feature"
#line hidden
        
        public NodeRemoveFromLoopOfTraceFeature()
        {
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "NodeRemoveFromLoopOfTrace", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void SetFixture(NodeRemoveFromLoopOfTraceFeature.FixtureData fixtureData)
        {
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute(DisplayName="Удаление разворотного узла из трассы с повторами")]
        [Xunit.TraitAttribute("FeatureTitle", "NodeRemoveFromLoopOfTrace")]
        [Xunit.TraitAttribute("Description", "Удаление разворотного узла из трассы с повторами")]
        public virtual void УдалениеРазворотногоУзлаИзТрассыСПовторами()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Удаление разворотного узла из трассы с повторами", ((string[])(null)));
#line 3
this.ScenarioSetup(scenarioInfo);
#line 4
 testRunner.Given("Задана трасса проходящая по волокну дважды", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 5
 testRunner.When("Пользователь удаляет разворотный узел", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 6
 testRunner.Then("Трасса укорачивается на два узла", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 7
 testRunner.And("Дальнее дважды использованное волокно удаляется из графа", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Удаление узла где повернули на волокно где трасса проходит дважды")]
        [Xunit.TraitAttribute("FeatureTitle", "NodeRemoveFromLoopOfTrace")]
        [Xunit.TraitAttribute("Description", "Удаление узла где повернули на волокно где трасса проходит дважды")]
        public virtual void УдалениеУзлаГдеПовернулиНаВолокноГдеТрассаПроходитДважды()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Удаление узла где повернули на волокно где трасса проходит дважды", ((string[])(null)));
#line 9
this.ScenarioSetup(scenarioInfo);
#line 10
 testRunner.Given("Задана трасса проходящая по волокну дважды", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 11
 testRunner.When("Пользователь кликает удалить узел в котором повернули в петлю", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 12
 testRunner.Then("Предложено удалить точки привязки или добавить узлы трасса не меняется узел не уд" +
                    "аляется", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 14
 testRunner.When("Пользователь добавляет узел между удаляемым и точкой привязки", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 15
 testRunner.When("И снова кликает удалить узел в котором повернули в петлю", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 16
 testRunner.Then("Трасса укорачивается на два узла", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 17
 testRunner.And("Ближнее дважды использованное волокно удаляется из графа", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Удаление узла внутри участка где трасса проходит дважды")]
        [Xunit.TraitAttribute("FeatureTitle", "NodeRemoveFromLoopOfTrace")]
        [Xunit.TraitAttribute("Description", "Удаление узла внутри участка где трасса проходит дважды")]
        public virtual void УдалениеУзлаВнутриУчасткаГдеТрассаПроходитДважды()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Удаление узла внутри участка где трасса проходит дважды", ((string[])(null)));
#line 19
this.ScenarioSetup(scenarioInfo);
#line 20
 testRunner.Given("Задана трасса проходящая по волокну дважды", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 21
 testRunner.When("Пользователь удаляет узел из этого участка", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 22
 testRunner.Then("Трасса укорачивается на два узла", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 23
 testRunner.And("Ближнее дважды использованное волокно удаляется из графа", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 24
 testRunner.And("Дальнее дважды использованное волокно удаляется из графа", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                NodeRemoveFromLoopOfTraceFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                NodeRemoveFromLoopOfTraceFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
