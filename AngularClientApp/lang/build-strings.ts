
class StringsBuilder {
    constructor(private whiteListLanguages: string[]) {
    }

    getParams(): { xlsxPath: string, tsPath: string, sheetName: string } {
        const args = process.argv.slice(2);
        if (args.length !== 3) {
            console.log('Please provide input xlsx file, sheet name and output folder');
            process.exit();
        }

        const xlsxPath = args[0];
        const sheetName = args[1];
        const tsPath = args[2];
        // console.log('Input xlsx:', xlsxPath);
        // console.log('Output ts:', tsPath);

        return {
            xlsxPath: xlsxPath,
            tsPath: tsPath,
            sheetName: sheetName
        };
    }

    getXlsxSheet(workbook, sheetName: string): any {

        if (!workbook.SheetNames.find(x => x === sheetName)) {
            console.log(`The ${sheetName} sheet is not found in the xlsx file`);
            process.exit();
        }

        const firstSheet = workbook.Sheets[sheetName];
        return firstSheet;
    }

    getAvailableLanguages(XLSX, sheet): string[] {

        const result = XLSX.utils.sheet_to_json(sheet, {
            header: 1,
            range: 'A1:Z1'
        });

        if (result.length !== 1 || result[0].length <= 1) {
            console.log('No languages are found');
            process.exit();
        }

        const languages = result[0].splice(1);
        // console.log('The following languages were found in xlsx: ', languages);

        const filtereDlanguages = this.filterLanguages(languages, this.whiteListLanguages);
        if (filtereDlanguages.length === 0) {
            console.log('No languages after filter');
            process.exit();
        }

        // console.log('Languages after filter: ', filtereDlanguages);
        return filtereDlanguages;
    }

    // function normalizeLanguageName(name: string): string {
    //     const delemiterIndex = name.indexOf('-');
    //     if (delemiterIndex === -1) { return name; }

    //     return name.substring(0, delemiterIndex);
    // }

    filterLanguages(languages: string[], whiteList: string[]): string[] {
        // const normalizedLanguages = languages.map(normalizeLanguageName);

        return languages.filter(x => {
            return whiteList.find(w => x === w);
        });
    }

    getStrings(XLSX, sheet): any {
        const strings = XLSX.utils.sheet_to_json(sheet);

        if (strings.length === 0) {
            console.log('No strings are found');
            process.exit();
        }

        return strings;
    }

    reformatStrings(languages: string[], strings): any {
        const result = {};
        for (const language of languages) {
            result[language] = {};
        }

        for (const string of strings) {
            for (const language of languages) {
                if (string.hasOwnProperty(language) && string[language] !== '' && string[language] !== '-') {
                    result[language][string.Name] = string[language];
                }
            }
        }

        // console.log('Statistic: ');
        // for (const language of languages) {
        //     console.log('', language, Object.keys(result[language]).length);
        // }

        return result;
    }

    saveTs(strings, tsPath: string): void {
        const os = require('os');

        const json = JSON.stringify(strings, null, 2);
        const content = `// AUTO-GENERATED. DO NOT EDIT THIS FILE
// tslint:disable:quotemark
// tslint:disable:max-line-length
export const languages = ` + json + ';' + os.EOL;

        const fs = require('fs');
        fs.writeFile(tsPath, content, function (err) {
            if (err) {
                return console.log(err);
            }
        });
    }

    main() {
        const XLSX = require('xlsx');
        const params = this.getParams();
        const workbook = XLSX.readFile(params.xlsxPath);
        const sheet = this.getXlsxSheet(workbook, params.sheetName);
        const languages = this.getAvailableLanguages(XLSX, sheet);
        const rawStrings = this.getStrings(XLSX, sheet);
        const strings = this.reformatStrings(languages, rawStrings);
        this.saveTs(strings, params.tsPath);
        // console.log('Done!');

    }
}


try {
    const program = new StringsBuilder(['en-US', 'ru-RU']);
    program.main();
} catch (ex) {
    console.error('Exception:', ex);
    process.exit(1);
}


